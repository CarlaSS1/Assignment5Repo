Problem 4 
----------
Implement a series of classes to represent an auction. At an auction, there is an auctioneer who announces items for auction, prices for items being sold, 
and when the bidding for a given item is closed the auctioneer announces the highest bidder. 

During the process of the auction bidders can declare their amount which they would like to bid for a given item to the auctioneer. 

If a bidder bids a price higher than another bidder (or higher than the initial price of the item if the bid is the first bid) for the given item, 
the auctioneer then announces the new current price as the current price to all the bidders.  

An item can be bid upon a maximum of 5 times before being sold. Once an item is bid on 5 times, 
the highest bidder receives the item and leaves the auction and no longer receives updates about the auction. 

Bidders can register and unregister at will.  Bidders have a maximum limit that they can spend for any given item and cannot exceed this limit. 
An item for auction has a starting bid price and year of creation. 


So,

TODO:
Auctioneer:
Subject Stuff:
-Using a stack that can only hold 5
	->The stack contains the order of bidders (Keeps track of how many pushes)
	->1. Pop off the 5th added bidder to get highest bidder
	->2. Pop off the last bidder added if > 5

-Using a list to contain all bidders
	->Notify all bidders of updated price
	->Track registering and unregistering

-Announce item for auction (Property NameOfItem String, Property Price Double)
-Prices for items being sold
-Announce highest bidder

Bidder:
A bidder that is registered, Property Name, Property SpendingLimit 
Observer Stuff:
Have an observer that is the highest bidder, have a condition that handles...
	->Leaving Auction
	->No longer receives updates

Bidders can register and unregister at will **(Could cause memory leaks)**

Bidders have a maximum limit to spend for any item

An item (A piece of the subject) has a property of starting bid price (Double) & year of creation (DatetimeOffset)


